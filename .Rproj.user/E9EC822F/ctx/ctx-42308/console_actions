{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(total_orders = n_distinct(invoiceno)) %>% ",
        "+ ",
        "  arrange(-total_orders)",
        "> ",
        "",
        "> ",
        "# 4 Aantal klanten per land",
        "> ",
        "customers_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid)) %>% ",
        "+ ",
        "  arrange(-customers)",
        "> ",
        "",
        "> ",
        "# 5 Samenvoegen van mean_per_country, customers_per_country, orders_per_country, total_per_country",
        "> ",
        "per_country_merge <- list(customers_per_country, orders_per_country, total_per_country)",
        "> ",
        "",
        "> ",
        "complete_info_per_country <- per_country_merge %>% ",
        "+ ",
        "  reduce(full_join, by= \"country\")",
        "> ",
        "",
        "> ",
        "# 6 Gemiddelde waarde per order per land",
        "> ",
        "complete_info_per_country$mean_per_order <- ",
        "+ ",
        "  (complete_info_per_country$total_of_all_orders / complete_info_per_country$total_orders) ",
        "> ",
        "",
        "> ",
        "# 7 Aanpassing van bedragen naar twee decimalen achter komma",
        "> ",
        "complete_info_per_country <- complete_info_per_country %>% ",
        "+ ",
        "mutate_if(is.numeric, ~round(., 2))",
        "> ",
        "overview_per_customer <- online_retail_total %>% ",
        "+ ",
        "  group_by(customerid, country) %>% ",
        "+ ",
        "  summarize(total_orders = n_distinct(invoiceno), total_value = sum(totalvalue))",
        "\u001B[38;5;250m`summarise()` has grouped output by 'customerid'. You can override using the `.groups` argument.\u001B[39m\n",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "View(online_retail_total)",
        "> ",
        "View(overview_per_customer)",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "online_retail <- read_csv2(\"Online Retail4.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [================================------------------------------------------------------------------------------------------------------------------------] \u001B[32m956.70GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [==========================================================================================================================================================] \u001B[32m1.52GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m",
        "\r                                                                                                                                                                                                                                              \r\u001B[1mRows: \u001B[22m\u001B[34m541909\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (5): InvoiceNo, StockCode, Description, InvoiceDate, Country\n\u001B[32mdbl\u001B[39m (3): Quantity, UnitPrice, CustomerID\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "online_retail <- online_retail %>% ",
        "+ ",
        "  mutate(InvoiceDate = dmy_hms(InvoiceDate)) %>% ",
        "+ ",
        "  rename_with(tolower) %>% ",
        "+ ",
        "  clean_names()",
        "> ",
        "online_retail_total <- online_retail %>% ",
        "+ ",
        "  mutate(totalvalue = quantity * unitprice)",
        "> ",
        "total_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(total_of_all_orders = sum(totalvalue)) %>% ",
        "+ ",
        "  arrange(-total_of_all_orders)",
        "> ",
        "",
        "> ",
        "# 3 Totaal aantal orders per land",
        "> ",
        "orders_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(total_orders = n_distinct(invoiceno)) %>% ",
        "+ ",
        "  arrange(-total_orders)",
        "> ",
        "",
        "> ",
        "# 4 Aantal klanten per land",
        "> ",
        "customers_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid)) %>% ",
        "+ ",
        "  arrange(-customers)",
        "> ",
        "",
        "> ",
        "# 5 Samenvoegen van mean_per_country, customers_per_country, orders_per_country, total_per_country",
        "> ",
        "per_country_merge <- list(customers_per_country, orders_per_country, total_per_country)",
        "> ",
        "",
        "> ",
        "complete_info_per_country <- per_country_merge %>% ",
        "+ ",
        "  reduce(full_join, by= \"country\")",
        "> ",
        "",
        "> ",
        "# 6 Gemiddelde waarde per order per land",
        "> ",
        "complete_info_per_country$mean_per_order <- ",
        "+ ",
        "  (complete_info_per_country$total_of_all_orders / complete_info_per_country$total_orders) ",
        "> ",
        "",
        "> ",
        "# 7 Aanpassing van bedragen naar twee decimalen achter komma",
        "> ",
        "complete_info_per_country <- complete_info_per_country %>% ",
        "+ ",
        "mutate_if(is.numeric, ~round(., 2))",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "View(total_per_country)",
        "> ",
        "View(total_per_country)",
        "> ",
        "online_retail <- read_csv2(\"online_retail_without_empty_customerid.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexed\u001B[0m \u001B[32m3.00B\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m419.43kB/s\u001B[0m\r                                                                                                                                                                                                         \r\u001B[1mindexed\u001B[0m \u001B[32m1.00TB\u001B[0m in \u001B[36m 0s\u001B[0m, \u001B[32m6.90TB/s\u001B[0m\r                                                                                                                                                                                                         ",
        "\r\u001B[1mRows: \u001B[22m\u001B[34m408309\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (5): InvoiceNo, StockCode, Description, InvoiceDate, Country\n\u001B[32mdbl\u001B[39m (3): Quantity, UnitPrice, CustomerID\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "View(online_retail)",
        "> ",
        "online_retail <- read_csv2(\"Online Retail4.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [===============================---------------------------------------------------------------------------------------------------------------------------] \u001B[32m1.03TB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [==========================================================================================================================================================] \u001B[32m1.54GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m",
        "\r                                                                                                                                                                                                                                              \r\u001B[1mRows: \u001B[22m\u001B[34m541909\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (5): InvoiceNo, StockCode, Description, InvoiceDate, Country\n\u001B[32mdbl\u001B[39m (3): Quantity, UnitPrice, CustomerID\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "View(online_retail)",
        "> ",
        "View(online_retail)",
        "> ",
        "online_retail <- online_retail %>% ",
        "+ ",
        "  mutate(InvoiceDate = dmy_hms(InvoiceDate)) %>% ",
        "+ ",
        "  rename_with(tolower) %>% ",
        "+ ",
        "  clean_names()",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Analyseren van de data ----",
        "> ",
        "",
        "> ",
        "# Onderstaande 7 stappen kunnen samen uitgevoerd worden om verschillende overzichten per land te krijgen en deze samen te voegen tot een tabel ----",
        "> ",
        "# 1 Totaalbedrag per order door middel van quantity * unit price",
        "> ",
        "online_retail_total <- online_retail %>% ",
        "+ ",
        "  mutate(totalvalue = quantity * unitprice)",
        "> ",
        "",
        "> ",
        "# 2 Totale waarde van online orders per land",
        "> ",
        "total_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(total_of_all_orders = sum(totalvalue)) %>% ",
        "+ ",
        "  arrange(-total_of_all_orders)",
        "> ",
        "",
        "> ",
        "# 3 Totaal aantal orders per land",
        "> ",
        "orders_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(total_orders = n_distinct(invoiceno)) %>% ",
        "+ ",
        "  arrange(-total_orders)",
        "> ",
        "",
        "> ",
        "# 4 Aantal klanten per land",
        "> ",
        "customers_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid)) %>% ",
        "+ ",
        "  arrange(-customers)",
        "> ",
        "",
        "> ",
        "# 5 Samenvoegen van mean_per_country, customers_per_country, orders_per_country, total_per_country",
        "> ",
        "per_country_merge <- list(customers_per_country, orders_per_country, total_per_country)",
        "> ",
        "",
        "> ",
        "complete_info_per_country <- per_country_merge %>% ",
        "+ ",
        "  reduce(full_join, by= \"country\")",
        "> ",
        "",
        "> ",
        "# 6 Gemiddelde waarde per order per land",
        "> ",
        "complete_info_per_country$mean_per_order <- ",
        "+ ",
        "  (complete_info_per_country$total_of_all_orders / complete_info_per_country$total_orders) ",
        "> ",
        "",
        "> ",
        "# 7 Aanpassing van bedragen naar twee decimalen achter komma",
        "> ",
        "complete_info_per_country <- complete_info_per_country %>% ",
        "+ ",
        "mutate_if(is.numeric, ~round(., 2))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Overzicht aantal orders en totaalbedrag per klant",
        "> ",
        "overview_per_customer <- online_retail_total %>% ",
        "+ ",
        "  group_by(customerid, country) %>% ",
        "+ ",
        "  summarize(total_orders = n_distinct(invoiceno), total_value = sum(totalvalue))",
        "\u001B[38;5;250m`summarise()` has grouped output by 'customerid'. You can override using the `.groups` argument.\u001B[39m\n",
        "> ",
        "View(per_country_merge)",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "View(total_per_country)",
        "> ",
        "View(overview_per_customer)",
        "> ",
        "View(overview_per_customer)",
        "> ",
        "overview_per_customer <- online_retail_total %>% ",
        "+ ",
        "  group_by(customerid, country) %>% ",
        "+ ",
        "  drop_na() %>% ",
        "+ ",
        "  summarize(total_orders = n_distinct(invoiceno), total_value = sum(totalvalue))",
        "\u001B[38;5;250m`summarise()` has grouped output by 'customerid'. You can override using the `.groups` argument.\u001B[39m\n",
        "> ",
        "View(overview_per_customer)",
        "> ",
        "overview_per_customer <- online_retail_total %>% ",
        "+ ",
        "  group_by(customerid, country) %>% ",
        "+ ",
        "  ",
        "+ ",
        "  summarize(total_orders = n_distinct(invoiceno), total_value = sum(totalvalue))",
        "\u001B[38;5;250m`summarise()` has grouped output by 'customerid'. You can override using the `.groups` argument.\u001B[39m\n",
        "> ",
        "View(overview_per_customer)",
        "> ",
        "# Overzicht aantal orders en totaalbedrag per klant",
        "> ",
        "overview_per_customer <- online_retail_total %>% ",
        "+ ",
        "  group_by(customerid, country) %>% ",
        "+ ",
        "  drop_na() %>% ",
        "+ ",
        "  summarize(total_orders = n_distinct(invoiceno), total_value = sum(totalvalue))",
        "\u001B[38;5;250m`summarise()` has grouped output by 'customerid'. You can override using the `.groups` argument.\u001B[39m\n",
        "> ",
        "View(overview_per_customer)",
        "> ",
        "View(overview_per_customer)",
        "> ",
        "online_retail <- read_csv2(\"Online Retail4.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [===============================---------------------------------------------------------------------------------------------------------------------------] \u001B[32m1.01TB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [==========================================================================================================================================================] \u001B[32m1.55GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m",
        "\r                                                                                                                                                                                                                                              \r\u001B[1mRows: \u001B[22m\u001B[34m541909\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (5): InvoiceNo, StockCode, Description, InvoiceDate, Country\n\u001B[32mdbl\u001B[39m (3): Quantity, UnitPrice, CustomerID\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Cleanen van de data ----",
        "> ",
        "",
        "> ",
        "# Omzetten character datatype van InvoiceDate kolom naar datetime formaat",
        "> ",
        "# Aanpassen kolomnaam naar lowercase",
        "> ",
        "online_retail <- online_retail %>% ",
        "+ ",
        "  mutate(InvoiceDate = dmy_hms(InvoiceDate)) %>% ",
        "+ ",
        "  rename_with(tolower) %>% ",
        "+ ",
        "  clean_names()",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Analyseren van de data ----",
        "> ",
        "",
        "> ",
        "# Onderstaande 7 stappen kunnen samen uitgevoerd worden om verschillende overzichten per land te krijgen en deze samen te voegen tot een tabel ----",
        "> ",
        "# 1 Totaalbedrag per order door middel van quantity * unit price",
        "> ",
        "online_retail_total <- online_retail %>% ",
        "+ ",
        "  mutate(totalvalue = quantity * unitprice)",
        "> ",
        "",
        "> ",
        "# 2 Totale waarde van online orders per land",
        "> ",
        "total_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(total_of_all_orders = sum(totalvalue)) %>% ",
        "+ ",
        "  arrange(-total_of_all_orders)",
        "> ",
        "",
        "> ",
        "# 3 Totaal aantal orders per land",
        "> ",
        "orders_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(total_orders = n_distinct(invoiceno)) %>% ",
        "+ ",
        "  arrange(-total_orders)",
        "> ",
        "",
        "> ",
        "# 4 Aantal klanten per land",
        "> ",
        "customers_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid)) %>% ",
        "+ ",
        "  arrange(-customers)",
        "> ",
        "",
        "> ",
        "# 5 Samenvoegen van mean_per_country, customers_per_country, orders_per_country, total_per_country",
        "> ",
        "per_country_merge <- list(customers_per_country, orders_per_country, total_per_country)",
        "> ",
        "",
        "> ",
        "complete_info_per_country <- per_country_merge %>% ",
        "+ ",
        "  reduce(full_join, by= \"country\")",
        "> ",
        "",
        "> ",
        "# 6 Gemiddelde waarde per order per land",
        "> ",
        "complete_info_per_country$mean_per_order <- ",
        "+ ",
        "  (complete_info_per_country$total_of_all_orders / complete_info_per_country$total_orders) ",
        "> ",
        "",
        "> ",
        "# 7 Aanpassing van bedragen naar twee decimalen achter komma",
        "> ",
        "complete_info_per_country <- complete_info_per_country %>% ",
        "+ ",
        "mutate_if(is.numeric, ~round(., 2))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Overzicht aantal orders en totaalbedrag per klant",
        "> ",
        "overview_per_customer <- online_retail_total %>% ",
        "+ ",
        "  group_by(customerid, country) %>% ",
        "+ ",
        "  drop_na() %>% ",
        "+ ",
        "  summarize(total_orders = n_distinct(invoiceno), total_value = sum(totalvalue))",
        "\u001B[38;5;250m`summarise()` has grouped output by 'customerid'. You can override using the `.groups` argument.\u001B[39m\n",
        "> ",
        "# Originele dataset",
        "> ",
        "online_retail <- read_csv2(\"Online Retail4.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [=======================---------------------------------------------------------------------------------------------------------------------------------] \u001B[32m610.66GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [==========================================================================================================================================================] \u001B[32m1.47GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m",
        "\r                                                                                                                                                                                                                                              \r\u001B[1mRows: \u001B[22m\u001B[34m541909\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (5): InvoiceNo, StockCode, Description, InvoiceDate, Country\n\u001B[32mdbl\u001B[39m (3): Quantity, UnitPrice, CustomerID\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "View(online_retail)",
        "> ",
        "head(online_retail)",
        "\u001B[38;5;246m# A tibble: 6 × 8\u001B[39m\n  InvoiceNo StockCode Description                         Quantity InvoiceDate     UnitPrice CustomerID Country       \n  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m                                  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m               \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m      \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m         \n\u001B[38;5;250m1\u001B[39m 536365    85123A    WHITE HANGING HEART T-LIGHT HOLDER         6 1-12-2018 08:26      2.55      \u001B[4m1\u001B[24m\u001B[4m7\u001B[24m850 United Kingdom\n",
        "\u001B[38;5;250m2\u001B[39m 536365    71053     WHITE METAL LANTERN                        6 1-12-2018 08:26      3.39      \u001B[4m1\u001B[24m\u001B[4m7\u001B[24m850 United Kingdom\n\u001B[38;5;250m3\u001B[39m 536365    84406B    CREAM CUPID HEARTS COAT HANGER             8 1-12-2018 08:26      2.75      \u001B[4m1\u001B[24m\u001B[4m7\u001B[24m850 United Kingdom\n\u001B[38;5;250m4\u001B[39m 536365    84029G    KNITTED UNION FLAG HOT WATER BOTTLE        6 1-12-2018 08:26      3.39      \u001B[4m1\u001B[24m\u001B[4m7\u001B[24m850 United Kingdom\n\u001B[38;5;250m5\u001B[39m 536365    84029E    RED WOOLLY HOTTIE WHITE HEART.             6 1-12-2018 08:26      3.39      \u001B[4m1\u001B[24m\u001B[4m7\u001B[24m850 United Kingdom\n",
        "\u001B[38;5;250m6\u001B[39m 536365    22752     SET 7 BABUSHKA NESTING BOXES               2 1-12-2018 08:26      7.65      \u001B[4m1\u001B[24m\u001B[4m7\u001B[24m850 United Kingdom\n",
        "> ",
        "online_retail <- online_retail %>% ",
        "+ ",
        "  mutate(InvoiceDate = dmy_hms(InvoiceDate)) %>% ",
        "+ ",
        "  rename_with(tolower) %>% ",
        "+ ",
        "  clean_names()",
        "> ",
        "View(online_retail)",
        "> ",
        "head(online_retail)",
        "\u001B[38;5;246m# A tibble: 6 × 8\u001B[39m\n  invoiceno stockcode description                         quantity invoicedate         unitprice customerid country       \n  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m                                  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dttm>\u001B[39m\u001B[23m                  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m      \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m         \n\u001B[38;5;250m1\u001B[39m 536365    85123A    WHITE HANGING HEART T-LIGHT HOLDER         6 2020-12-01 \u001B[38;5;246m18:08:26\u001B[39m      2.55      \u001B[4m1\u001B[24m\u001B[4m7\u001B[24m850 United Kingdom\n",
        "\u001B[38;5;250m2\u001B[39m 536365    71053     WHITE METAL LANTERN                        6 2020-12-01 \u001B[38;5;246m18:08:26\u001B[39m      3.39      \u001B[4m1\u001B[24m\u001B[4m7\u001B[24m850 United Kingdom\n\u001B[38;5;250m3\u001B[39m 536365    84406B    CREAM CUPID HEARTS COAT HANGER             8 2020-12-01 \u001B[38;5;246m18:08:26\u001B[39m      2.75      \u001B[4m1\u001B[24m\u001B[4m7\u001B[24m850 United Kingdom\n\u001B[38;5;250m4\u001B[39m 536365    84029G    KNITTED UNION FLAG HOT WATER BOTTLE        6 2020-12-01 \u001B[38;5;246m18:08:26\u001B[39m      3.39      \u001B[4m1\u001B[24m\u001B[4m7\u001B[24m850 United Kingdom\n",
        "\u001B[38;5;250m5\u001B[39m 536365    84029E    RED WOOLLY HOTTIE WHITE HEART.             6 2020-12-01 \u001B[38;5;246m18:08:26\u001B[39m      3.39      \u001B[4m1\u001B[24m\u001B[4m7\u001B[24m850 United Kingdom\n\u001B[38;5;250m6\u001B[39m 536365    22752     SET 7 BABUSHKA NESTING BOXES               2 2020-12-01 \u001B[38;5;246m18:08:26\u001B[39m      7.65      \u001B[4m1\u001B[24m\u001B[4m7\u001B[24m850 United Kingdom\n",
        "> ",
        "online_retail_total <- online_retail %>% ",
        "+ ",
        "  mutate(totalvalue = quantity * unitprice)",
        "> ",
        "View(online_retail_total)",
        "> ",
        "online_retail_single_orderline <- online_retail_total %>% ",
        "+ ",
        "  group_by(invoiceno)",
        "> ",
        "View(online_retail_single_orderline)",
        "> ",
        "View(online_retail_single_orderline)",
        "> ",
        "online_retail <- read_csv2(\"Online Retail4.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [=================================--------------------------------------------------------------------------------------------------------------] \u001B[32m880.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [=================================================================================================================================================] \u001B[32m1.53GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m",
        "\r                                                                                                                                                                                                                                     \r\u001B[1mRows: \u001B[22m\u001B[34m541909\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (5): InvoiceNo, StockCode, Description, InvoiceDate, Country\n\u001B[32mdbl\u001B[39m (3): Quantity, UnitPrice, CustomerID\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Cleanen van de data ----",
        "> ",
        "",
        "> ",
        "# Omzetten character datatype van InvoiceDate kolom naar datetime formaat",
        "> ",
        "# Aanpassen kolomnaam naar lowercase",
        "> ",
        "online_retail <- online_retail %>% ",
        "+ ",
        "  mutate(InvoiceDate = dmy_hms(InvoiceDate)) %>% ",
        "+ ",
        "  rename_with(tolower) %>% ",
        "+ ",
        "  clean_names()",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Analyseren van de data ----",
        "> ",
        "",
        "> ",
        "# Onderstaande 7 stappen kunnen samen uitgevoerd worden om verschillende overzichten per land te krijgen en deze samen te voegen tot een tabel ----",
        "> ",
        "# 1 Totaalbedrag per order door middel van quantity * unit price",
        "> ",
        "online_retail_total <- online_retail %>% ",
        "+ ",
        "  mutate(totalvalue = quantity * unitprice)",
        "> ",
        "total_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(total_of_all_orders = sum(totalvalue)) %>% ",
        "+ ",
        "  arrange(-total_of_all_orders)",
        "> ",
        "View(total_per_country)",
        "> ",
        "# Originele dataset",
        "> ",
        "online_retail <- read_csv2(\"Online Retail4.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [=======================------------------------------------------------------------------------------------------------------------------------] \u001B[32m827.41GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [=================================================================================================================================================] \u001B[32m1.16GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m",
        "\r                                                                                                                                                                                                                                     \r\u001B[1mRows: \u001B[22m\u001B[34m541909\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (5): InvoiceNo, StockCode, Description, InvoiceDate, Country\n\u001B[32mdbl\u001B[39m (3): Quantity, UnitPrice, CustomerID\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "online_retail_total <- online_retail %>% ",
        "+ ",
        "  mutate(totalvalue = quantity * unitprice)",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;250m`mutate()`\u001B[39m:\u001B[22m\n\u001B[38;5;250m\u001B[33m!\u001B[38;5;250m Problem while computing `totalvalue = quantity * unitprice`.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m object 'quantity' not found\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "online_retail <- online_retail %>% ",
        "+ ",
        "  mutate(InvoiceDate = dmy_hms(InvoiceDate)) %>% ",
        "+ ",
        "  rename_with(tolower) %>% ",
        "+ ",
        "  clean_names()",
        "> ",
        "online_retail_total <- online_retail %>% ",
        "+ ",
        "  mutate(totalvalue = quantity * unitprice)",
        "> ",
        "complete_info_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(total_of_all_orders = sum(totalvalue),",
        "+ ",
        "            total_orders = n_distinct(invoiceno),",
        "+ ",
        "            customers = n_distinct(customerid))",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "complete_info_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid),",
        "+ ",
        "            total_orders = n_distinct(invoiceno),",
        "+ ",
        "            total_value = sum(totalvalue)",
        "+ ",
        "            )",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "complete_info_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid),",
        "+ ",
        "            total_orders = n_distinct(invoiceno),",
        "+ ",
        "            total_value = sum(totalvalue)",
        "+ ",
        "            ) %>% ",
        "+ ",
        "  mean_per_order <- (complete_info_per_country$total_value / complete_info_per_country$total_orders)",
        "Error in online_retail_total %>% group_by(country) %>% summarize(customers = n_distinct(customerid),  : \n  could not find function \"%>%<-\"\n",
        "> ",
        "complete_info_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid),",
        "+ ",
        "            total_orders = n_distinct(invoiceno),",
        "+ ",
        "            total_value = sum(totalvalue)",
        "+ ",
        "            ) %>% ",
        "+ ",
        "  complete_info_per_country$mean_per_order <- (complete_info_per_country$total_value / complete_info_per_country$total_orders)",
        "Error in online_retail_total %>% group_by(country) %>% summarize(customers = n_distinct(customerid),  : \n  could not find function \"%>%<-\"\n",
        "> ",
        "complete_info_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid),",
        "+ ",
        "            total_orders = n_distinct(invoiceno),",
        "+ ",
        "            total_value = sum(totalvalue),",
        "+ ",
        "            mean_per_order = (total_value / total_orders) ",
        "+ ",
        "            )",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "complete_info_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid),",
        "+ ",
        "            total_orders = n_distinct(invoiceno),",
        "+ ",
        "            total_value = sum(totalvalue),",
        "+ ",
        "            mean_per_order = (total_value / total_orders) ",
        "+ ",
        "            ) %>% ",
        "+ ",
        "  mutate_if(is.numeric, ~round(., 2))",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "complete_info_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid),",
        "+ ",
        "            total_orders = n_distinct(invoiceno),",
        "+ ",
        "            total_value = sum(totalvalue),",
        "+ ",
        "            mean_per_order = (total_value / total_orders) ",
        "+ ",
        "            ) %>% ",
        "+ ",
        "View(complete_info_per_country)",
        "Error in View : invalid caption argument\n",
        "> ",
        "complete_info_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid),",
        "+ ",
        "            total_orders = n_distinct(invoiceno),",
        "+ ",
        "            total_value = sum(totalvalue),",
        "+ ",
        "            mean_per_order = (total_value / total_orders) ",
        "+ ",
        "            )",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "complete_info_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid),",
        "+ ",
        "            total_orders = n_distinct(invoiceno),",
        "+ ",
        "            total_value = sum(totalvalue),",
        "+ ",
        "            mean_per_order = (total_value / total_orders) ",
        "+ ",
        "            ) %>% ",
        "+ ",
        "  mutate_if(is.numeric, ~round(., 2))",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "online_retail <- read_csv2(\"Online Retail4.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [========================-----------------------------------------------------------------------------------------------------------------------] \u001B[32m774.47GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [=================================================================================================================================================] \u001B[32m1.35GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m",
        "\r                                                                                                                                                                                                                                     \r\u001B[1mRows: \u001B[22m\u001B[34m541909\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (5): InvoiceNo, StockCode, Description, InvoiceDate, Country\n\u001B[32mdbl\u001B[39m (3): Quantity, UnitPrice, CustomerID\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Cleanen van de data ----",
        "> ",
        "",
        "> ",
        "# Omzetten character datatype van InvoiceDate kolom naar datetime formaat",
        "> ",
        "# Aanpassen kolomnaam naar lowercase",
        "> ",
        "online_retail <- online_retail %>% ",
        "+ ",
        "  mutate(InvoiceDate = dmy_hms(InvoiceDate)) %>% ",
        "+ ",
        "  rename_with(tolower) %>% ",
        "+ ",
        "  clean_names()",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Analyseren van de data ----",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Totaalbedrag per orderregel toevoegen aan dataframe door middel van quantity * unit price",
        "> ",
        "online_retail_total <- online_retail %>% ",
        "+ ",
        "  mutate(totalvalue = quantity * unitprice)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Overzicht per land van:",
        "> ",
        "complete_info_per_country <- online_retail_total %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid), # Totaal aantal klanten",
        "+ ",
        "            total_orders = n_distinct(invoiceno), # Totaal aantal orders",
        "+ ",
        "            total_value = sum(totalvalue), # Totale waarde van alle orders ",
        "+ ",
        "            mean_per_order = (total_value / total_orders) # Gemiddelde waarde per order",
        "+ ",
        "            ) %>% ",
        "+ ",
        "  mutate_if(is.numeric, ~round(., 2)) ",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Overzicht aantal orders en totaalbedrag per klant",
        "> ",
        "overview_per_customer <- online_retail_total %>% ",
        "+ ",
        "  group_by(customerid, country) %>% ",
        "+ ",
        "  drop_na() %>% ",
        "+ ",
        "  summarize(total_orders = n_distinct(invoiceno), total_value = sum(totalvalue))",
        "\u001B[38;5;250m`summarise()` has grouped output by 'customerid'. You can override using the `.groups` argument.\u001B[39m\n",
        "> ",
        "# Originele dataset",
        "> ",
        "online_retail <- read_csv2(\"Online Retail4.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [===========================--------------------------------------------------------------------------------------------------------------------] \u001B[32m773.50GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [=================================================================================================================================================] \u001B[32m1.55GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m",
        "\r                                                                                                                                                                                                                                     \r\u001B[1mRows: \u001B[22m\u001B[34m541909\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (5): InvoiceNo, StockCode, Description, InvoiceDate, Country\n\u001B[32mdbl\u001B[39m (3): Quantity, UnitPrice, CustomerID\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Cleanen van de data ----",
        "> ",
        "",
        "> ",
        "# Omzetten character datatype van InvoiceDate kolom naar datetime formaat",
        "> ",
        "# Aanpassen kolomnaam naar lowercase",
        "> ",
        "online_retail <- online_retail %>% ",
        "+ ",
        "  mutate(InvoiceDate = dmy_hms(InvoiceDate)) %>% ",
        "+ ",
        "  rename_with(tolower) %>% ",
        "+ ",
        "  clean_names()",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Analyseren van de data ----",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Totaalbedrag per orderregel toevoegen aan dataframe door middel van quantity * unit price",
        "> ",
        "online_retail <- online_retail %>% ",
        "+ ",
        "  mutate(totalvalue = quantity * unitprice)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Overzicht per land van:",
        "> ",
        "complete_info_per_country <- online_retail %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid), # Totaal aantal klanten",
        "+ ",
        "            total_orders = n_distinct(invoiceno), # Totaal aantal orders",
        "+ ",
        "            total_value = sum(totalvalue), # Totale waarde van alle orders ",
        "+ ",
        "            mean_per_order = (total_value / total_orders) # Gemiddelde waarde per order",
        "+ ",
        "            ) %>% ",
        "+ ",
        "  mutate_if(is.numeric, ~round(., 2)) ",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Overzicht aantal orders en totaalbedrag per klant",
        "> ",
        "overview_per_customer <- online_retail %>% ",
        "+ ",
        "  group_by(customerid, country) %>% ",
        "+ ",
        "  drop_na() %>% ",
        "+ ",
        "  summarize(total_orders = n_distinct(invoiceno), total_value = sum(totalvalue))",
        "\u001B[38;5;250m`summarise()` has grouped output by 'customerid'. You can override using the `.groups` argument.\u001B[39m\n",
        "> ",
        "View(overview_per_customer)",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "# Originele dataset",
        "> ",
        "online_retail <- read_csv2(\"Online Retail4.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [========================-----------------------------------------------------------------------------------------------------------------------] \u001B[32m855.99GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [=================================================================================================================================================] \u001B[32m1.19GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m",
        "\r                                                                                                                                                                                                                                     \r\u001B[1mRows: \u001B[22m\u001B[34m541909\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (5): InvoiceNo, StockCode, Description, InvoiceDate, Country\n\u001B[32mdbl\u001B[39m (3): Quantity, UnitPrice, CustomerID\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "online_retail <- online_retail %>% ",
        "+ ",
        "  mutate(InvoiceDate = dmy_hms(InvoiceDate)) %>% ",
        "+ ",
        "  rename_with(tolower) %>% ",
        "+ ",
        "  clean_names()",
        "> ",
        "complete_info_per_country <- online_retail %>% ",
        "+ ",
        "  mutate(totalvalue = quantity * unitprice) %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid), # Totaal aantal klanten",
        "+ ",
        "            total_orders = n_distinct(invoiceno), # Totaal aantal orders",
        "+ ",
        "            total_value = sum(totalvalue), # Totale waarde van alle orders ",
        "+ ",
        "            mean_per_order = (total_value / total_orders) # Gemiddelde waarde per order",
        "+ ",
        "            ) %>% ",
        "+ ",
        "  mutate_if(is.numeric, ~round(., 2)) ",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "View(online_retail)",
        "> ",
        "online_retail <- read_csv2(\"Online Retail4.csv\")",
        "\u001B[36mℹ\u001B[39m Using \u001B[34m\u001B[34m\"','\"\u001B[34m\u001B[39m as decimal and \u001B[34m\u001B[34m\"'.'\"\u001B[34m\u001B[39m as grouping mark. Use `read_delim()` for more control.\n\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [====================---------------------------------------------------------------------------------------------------------------------------] \u001B[32m569.94GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mOnline Retail4.csv\u001B[0m [=================================================================================================================================================] \u001B[32m1.46GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m",
        "\r                                                                                                                                                                                                                                     \r\u001B[1mRows: \u001B[22m\u001B[34m541909\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \";\"\n\u001B[31mchr\u001B[39m (5): InvoiceNo, StockCode, Description, InvoiceDate, Country\n\u001B[32mdbl\u001B[39m (3): Quantity, UnitPrice, CustomerID\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Cleanen van de data ----",
        "> ",
        "",
        "> ",
        "# Omzetten character datatype van InvoiceDate kolom naar datetime formaat",
        "> ",
        "# Aanpassen kolomnaam naar lowercase",
        "> ",
        "online_retail <- online_retail %>% ",
        "+ ",
        "  mutate(InvoiceDate = dmy_hms(InvoiceDate)) %>% ",
        "+ ",
        "  rename_with(tolower) %>% ",
        "+ ",
        "  clean_names()",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Analyseren van de data ----",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Totaalbedrag per orderregel toevoegen aan dataframe door middel van quantity * unit price",
        "> ",
        "online_retail <- online_retail %>% ",
        "+ ",
        "  mutate(totalvalue = quantity * unitprice)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Overzicht per land van:",
        "> ",
        "complete_info_per_country <- online_retail %>% ",
        "+ ",
        "  group_by(country) %>% ",
        "+ ",
        "  summarize(customers = n_distinct(customerid), # Totaal aantal klanten",
        "+ ",
        "            total_orders = n_distinct(invoiceno), # Totaal aantal orders",
        "+ ",
        "            total_value = sum(totalvalue), # Totale waarde van alle orders ",
        "+ ",
        "            mean_per_order = (total_value / total_orders) # Gemiddelde waarde per order",
        "+ ",
        "            ) %>% ",
        "+ ",
        "  mutate_if(is.numeric, ~round(., 2)) ",
        "> ",
        "View(complete_info_per_country)",
        "> ",
        "View(online_retail)",
        "> ",
        "source(\"~/Documents/NOVI/Wire Solutions/R/Scripts/online_retail.R\")",
        "Error in install.packages : Updating loaded packages\nError in install.packages : Updating loaded packages\nError in install.packages : Updating loaded packages\nError in install.packages : Updating loaded packages\n",
        "Error in setwd(\"CSV\") : cannot change working directory\n",
        "> ",
        "# Overzicht aantal orders en totaalbedrag per klant",
        "> ",
        "overview_per_customer <- online_retail %>% ",
        "+ ",
        "  group_by(customerid, country) %>% ",
        "+ ",
        "  drop_na() %>% ",
        "+ ",
        "  summarize(total_orders = n_distinct(invoiceno), total_value = sum(totalvalue))",
        "\u001B[38;5;250m`summarise()` has grouped output by 'customerid'. You can override using the `.groups` argument.\u001B[39m\n",
        "> ",
        "View(overview_per_customer)",
        "> ",
        "install.packages(\"tidyverse\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "install.packages(\"skimr\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "install.packages(\"janitor\")",
        "Error in install.packages : Updating loaded packages\n\nRestarting R session...\n\n"
    ]
}