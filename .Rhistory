aantal_online_shoppers = c(selected_country$aantal_online_shoppers, rep(NA, 4))
)
# The lm function in R will exclude the observations with NA values while fitting the model
model.1 <- lm(formula = aantal_online_shoppers ~ year, data = df)
# tidy your model and include 95% confidence intervals
broom::tidy(model.1, conf.int = T)
# you can use the predict function as well for precise predictions
# get predictions for every X value
predict <- predict(object = model.1, newdata = df)
# Prediction toevoegen in nieuwe dataframe met originele waardes
complete <- df %>%
cbind(prediction = predict) %>%
mutate(country = chosen_country) %>%
mutate_if(is.numeric, ~round(., 0))
complete <- complete[, c(4,1,2,3)] # Ordenen van kolom landnaam eerst
# Controleren correlatie tussen data en prediction
correlation <- complete %>%
na.omit(complete)
cor(correlation$aantal_online_shoppers, correlation$prediction)
View(complete)
View(selected_country)
# BELANGRIJK Keuze maken voor land ----
chosen_country <- c("Luxembourg")
selected_country <- overview_by_country %>%
filter(country == chosen_country)
# Creeren van prognose
# create a data frame to store your variables
df <- data.frame(
year = (2008:2024),
aantal_online_shoppers = c(selected_country$aantal_online_shoppers, rep(NA, 4))
)
# The lm function in R will exclude the observations with NA values while fitting the model
model.1 <- lm(formula = aantal_online_shoppers ~ year, data = df)
# tidy your model and include 95% confidence intervals
broom::tidy(model.1, conf.int = T)
# you can use the predict function as well for precise predictions
# get predictions for every X value
predict <- predict(object = model.1, newdata = df)
# Prediction toevoegen in nieuwe dataframe met originele waardes
complete <- df %>%
cbind(prediction = predict) %>%
mutate(country = chosen_country) %>%
mutate_if(is.numeric, ~round(., 0))
complete <- complete[, c(4,1,2,3)] # Ordenen van kolom landnaam eerst
# Controleren correlatie tussen data en prediction
correlation <- complete %>%
na.omit(complete)
cor(correlation$aantal_online_shoppers, correlation$prediction)
View(complete)
View(selected_country)
# BELANGRIJK Keuze maken voor land ----
chosen_country <- c("Spain")
selected_country <- overview_by_country %>%
filter(country == chosen_country)
# Creeren van prognose
# create a data frame to store your variables
df <- data.frame(
year = (2008:2024),
aantal_online_shoppers = c(selected_country$aantal_online_shoppers, rep(NA, 4))
)
# The lm function in R will exclude the observations with NA values while fitting the model
model.1 <- lm(formula = aantal_online_shoppers ~ year, data = df)
# tidy your model and include 95% confidence intervals
broom::tidy(model.1, conf.int = T)
# you can use the predict function as well for precise predictions
# get predictions for every X value
predict <- predict(object = model.1, newdata = df)
# Prediction toevoegen in nieuwe dataframe met originele waardes
complete <- df %>%
cbind(prediction = predict) %>%
mutate(country = chosen_country) %>%
mutate_if(is.numeric, ~round(., 0))
complete <- complete[, c(4,1,2,3)] # Ordenen van kolom landnaam eerst
# Controleren correlatie tussen data en prediction
correlation <- complete %>%
na.omit(complete)
cor(correlation$aantal_online_shoppers, correlation$prediction)
View(complete)
eu_countries <- c("Austria", "Belgium", "Bulgaria", "Croatia",
"Cyprus", "Czechia", "Denmark", "Estonia", "Finland",
"France", "Germany", "Greece", "Hungary", "Iceland",
"Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Malta", "Netherlands", "North Macedonia", "Norway",
"Poland", "Portugal", "Romania", "Slovakia",
"Slovenia", "Spain", "Sweden", "Turkey", "United Kingdom")
# Originele dataset
breakdown <- read_csv2("online shoppers breakdown in last 3 months 2015_2021.csv")
View(breakdown)
breakdown <- read_csv2("online shoppers breakdown in last 3 months 2015_2021.csv") %>%
filter(year %in% c(2008:2020)) %>% # Filter op jaar vanaf 2008
filter(country %in% eu_countries) # Filter op de juiste Europese landen
View(breakdown)
breakdown <- read_csv2("online shoppers breakdown in last 3 months 2015_2021.csv") %>%
filter(year %in% c(2008:2021)) %>% # Filter op jaar vanaf 2008
filter(country %in% eu_countries) # Filter op de juiste Europese landen
View(breakdown)
test <- breakdown %>%
mutate(no_purchases = 100 - (purchases_1_or_2_times + purchases_3_to_5_times + purchases_6_to_10_times + purchases_more_than_10_times))
test <- breakdown %>%
mutate(no_purchases = purchases_1_or_2_times + purchases_3_to_5_times + purchases_6_to_10_times + purchases_more_than_10_times - 100)
test <- breakdown %>%
mutate(no_purchases = purchases_1_or_2_times + `purchases_ 3_to_5_times` + purchases_6_to_10_times + purchases_more_than_10_times - 100)
head(breakdown)
breakdown <- read_csv2("online shoppers breakdown in last 3 months 2015_2021.csv") %>%
filter(year %in% c(2008:2021)) %>% # Filter op jaar vanaf 2008
filter(country %in% eu_countries)  # Filter op de juiste Europese landen
# Originele dataset
breakdown <- read_csv2("online shoppers breakdown in last 3 months 2015_2021.csv") %>%
filter(year %in% c(2008:2021)) %>% # Filter op jaar vanaf 2008
filter(country %in% eu_countries)  # Filter op de juiste Europese landen
test <- breakdown %>%
mutate(no_purchases = purchases_1_or_2_times + purchases_ 3_to_5_times + purchases_6_to_10_times + purchases_more_than_10_times - 100)
test <- breakdown %>%
mutate(no_purchases = purchases_1_or_2_times + purchases_3_to_5_times + purchases_6_to_10_times + purchases_more_than_10_times - 100)
View(test)
test <- breakdown %>%
mutate(no_purchases = 100 - (purchases_1_or_2_times + purchases_3_to_5_times + purchases_6_to_10_times + purchases_more_than_10_times))
View(test)
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_bar(mapping = aes(x = year, y = individuals_purchasing_online_in_percentage, color = country)) +
theme_minimal()
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_bar(mapping = aes(x = "", y = year)) +
theme_minimal()
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_bar(mapping = aes(x = "", y = year)) +
theme_minimal()
populatie_vanaf_2008 <- read_csv2("populatie_per_land.csv")
View(populatie_vanaf_2008)
populatie_vanaf_2008 <- read_csv2("populatie_per_land.csv") %>%
pivot_longer(!"country", names_to = "year", values_to = "population")
View(populatie_vanaf_2008)
breakdown <- read_csv2("online shoppers breakdown in last 3 months 2015_2021.csv") %>%
filter(year == 2021) %>% # Filter op jaar vanaf 2008
filter(country %in% eu_countries)  # Filter op de juiste Europese landen
View(breakdown)
# Originele dataset
breakdown <- read_csv2("online shoppers breakdown in last 3 months 2015_2021.csv") %>%
filter(year == 2021) %>% # Filter op jaar vanaf 2008
filter(country %in% eu_countries) %>%   # Filter op de juiste Europese landen
pivot_longer(!"country", names_to = "year", values_to = "percentage")
View(breakdown)
breakdown <- read_csv2("online shoppers breakdown in last 3 months 2015_2021.csv") %>%
filter(year == 2021) %>% # Filter op jaar vanaf 2008
filter(country %in% eu_countries) %>%   # Filter op de juiste Europese landen
select(- year)
pivot_longer(!"country", names_to = "year", values_to = "percentage")
breakdown <- read_csv2("online shoppers breakdown in last 3 months 2015_2021.csv") %>%
filter(year == 2021) %>% # Filter op jaar vanaf 2008
filter(country %in% eu_countries) %>%   # Filter op de juiste Europese landen
select(- year) %>%
pivot_longer(!"country", names_to = "year", values_to = "percentage")
View(breakdown)
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_bar(mapping = aes(x = "", y = year)) +
theme_minimal()
breakdown <- read_csv2("online shoppers breakdown in last 3 months 2015_2021.csv") %>%
filter(year == 2021) %>% # Filter op jaar vanaf 2008
filter(country %in% eu_countries) %>%   # Filter op de juiste Europese landen
select(- year) %>%
pivot_longer(!"country", names_to = "amount", values_to = "percentage")
View(breakdown)
breakdown <- read_csv2("online shoppers breakdown in last 3 months 2015_2021.csv") %>%
mutate(no_purchases = 100 - (purchases_1_or_2_times + purchases_3_to_5_times + purchases_6_to_10_times + purchases_more_than_10_times)) %>%
filter(year == 2021) %>% # Filter op jaar vanaf 2008
filter(country %in% eu_countries) %>%   # Filter op de juiste Europese landen
select(- year) %>%
pivot_longer(!"country", names_to = "amount", values_to = "percentage")
View(breakdown)
View(breakdown)
ggplot(data = breakdown, aes(x = "", y = amount, fill = percentage) %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0)
facet_wrap(~country) +
theme_minimal()
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_line(mapping = aes(x = amount, y = percentage, color = country)) +
theme_minimal()
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_plot(mapping = aes(x = amount, y = percentage, color = country)) +
theme_minimal()
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_point(mapping = aes(x = amount, y = percentage, color = country)) +
theme_minimal()
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_bar(mapping = aes(x = amount, y = percentage, color = country)) +
theme_minimal()
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_bar(mapping = aes(x = "", y = percentage, color = country)) +
theme_minimal()
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_bar(mapping = aes(y = percentage, color = country)) +
theme_minimal()
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_bar(mapping = aes(x = percentage, color = country)) +
theme_minimal()
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_bar(mapping = aes(x = percentage, fill = percentage)) +
theme_minimal()
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_bar(mapping = aes(x = percentage, fill = percentage, color = country)) +
theme_minimal()
ggplot(data = breakdown %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_bar(mapping = aes(x = percentage, fill = country)) +
theme_minimal()
source("~/.active-rstudio-document")
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
install.packages("maps")
install.packages("viridis")
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
world_map <- map_data("world")
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightgray", colour = "white")
# Some EU Contries
some.eu.countries <- c(
"Portugal", "Spain", "France", "Switzerland", "Germany",
"Austria", "Belgium", "UK", "Netherlands",
"Denmark", "Poland", "Italy",
"Croatia", "Slovenia", "Hungary", "Slovakia",
"Czech republic"
)
world_map <- map_data("world")
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightgray", colour = "white")
some_eu_countries <- c(
"Portugal", "Spain", "France", "Switzerland", "Germany",
"Austria", "Belgium", "UK", "Netherlands",
"Denmark", "Poland", "Italy",
"Croatia", "Slovenia", "Hungary", "Slovakia",
"Czech republic"
# Retrievethe map data
some_eu_maps <- map_data("world", region = some_eu_countries)
# Some EU Contries
some_eu_countries <- c(
"Portugal", "Spain", "France", "Switzerland", "Germany",
"Austria", "Belgium", "UK", "Netherlands",
"Denmark", "Poland", "Italy",
"Croatia", "Slovenia", "Hungary", "Slovakia",
"Czech republic"
)
# Retrievethe map data
some_eu_maps <- map_data("world", region = some_eu_countries)
region.lab.data <- some.eu.maps %>%
group_by(region) %>%
summarise(long = mean(long), lat = mean(lat))
region_lab_data <- some_eu_maps %>%
group_by(region) %>%
summarise(long = mean(long), lat = mean(lat))
ggplot(some_eu_maps, aes(x = long, y = lat)) +
geom_polygon(aes( group = group, fill = region))+
geom_text(aes(label = region), data = region.lab.data,  size = 3, hjust = 0.5)+
scale_fill_viridis_d()+
theme_void()+
theme(legend.position = "none")
ggplot(some_eu_maps, aes(x = long, y = lat)) +
geom_polygon(aes( group = group, fill = region))+
geom_text(aes(label = region), data = region_lab_data,  size = 3, hjust = 0.5)+
scale_fill_viridis_d()+
theme_void()+
theme(legend.position = "none")
library(here)
library(tidyverse)
library(lubridate)
library(skimr)
library(janitor)
library(broom)
library(writexl)
library(ggplot2)
library(svglite)
# Prognose maker ----
# Laden van dataset
setwd("CSV")
# Originele dataset
overview_by_country <- read_csv2("overview_by_country.csv")
# BELANGRIJK Keuze maken voor land ----
chosen_country <- c("Spain")
selected_country <- overview_by_country %>%
filter(country == chosen_country)
# Creeren van prognose
# create a data frame to store your variables
df <- data.frame(
year = (2008:2024),
aantal_online_shoppers = c(selected_country$aantal_online_shoppers, rep(NA, 4))
)
# The lm function in R will exclude the observations with NA values while fitting the model
model.1 <- lm(formula = aantal_online_shoppers ~ year, data = df)
# tidy your model and include 95% confidence intervals
broom::tidy(model.1, conf.int = T)
# you can use the predict function as well for precise predictions
# get predictions for every X value
predict <- predict(object = model.1, newdata = df)
# Prediction toevoegen in nieuwe dataframe met originele waardes
complete <- df %>%
cbind(prediction = predict) %>%
mutate(country = chosen_country) %>%
mutate_if(is.numeric, ~round(., 0))
complete <- complete[, c(4,1,2,3)] # Ordenen van kolom landnaam eerst
# Controleren correlatie tussen data en prediction
correlation <- complete %>%
na.omit(complete)
cor(correlation$aantal_online_shoppers, correlation$prediction)
# Data wegschrijven naar excel
write_xlsx(complete, "filename.xlsx")
# Plots ----
ggplot(data = online_purchases_by_individuals) +
geom_point(mapping = aes(x = year, y = individuals_purchasing_online_in_percentage, color = country))
ggplot(data = online_purchases_by_individuals %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France"))) +
geom_line(mapping = aes(x = year, y = individuals_purchasing_online_in_percentage, color = country)) +
theme_minimal()
smoothplot <- online_purchases_by_individuals %>%
filter(country %in% c("Austria", "Belgium", "Netherlands", "France")) %>%
ggplot(mapping = aes(x = year, y = individuals_purchasing_online_in_percentage, color = country)) +
geom_smooth() +
facet_wrap(~country) +
theme_minimal()
smoothplot +
labs(title = "Online Shoppers: percentage per jaar", subtitle = "Percentage van bevolking met minimaal een online aankoop", caption = "Data afkomstig van Eurostat")
View(complete)
View(overview_by_country)
library(here)
library(tidyverse)
library(lubridate)
library(skimr)
library(janitor)
library(broom)
library(writexl)
library(ggplot2)
library(svglite)
setwd("CSV")
# Originele dataset
overview_by_country <- read_csv2("overview_by_country.csv")
# BELANGRIJK Keuze maken voor land ----
chosen_country <- c("Austria")
selected_country <- overview_by_country %>%
filter(country == chosen_country)
# Creeren van prognose
# create a data frame to store your variables
df <- data.frame(
year = (2008:2024),
online_shoppers = c(selected_country$individuals_purchasing_online_in_percentage, rep(NA, 4))
)
# The lm function in R will exclude the observations with NA values while fitting the model
model.1 <- lm(formula = online_shoppers ~ year, data = df)
# tidy your model and include 95% confidence intervals
broom::tidy(model.1, conf.int = T)
# you can use the predict function as well for precise predictions
# get predictions for every X value
predict <- predict(object = model.1, newdata = df)
# Prediction toevoegen in nieuwe dataframe met originele waardes
complete <- df %>%
cbind(prediction = predict) %>%
mutate(country = chosen_country) %>%
mutate_if(is.numeric, ~round(., 0))
complete <- complete[, c(4,1,2,3)] # Ordenen van kolom landnaam eerst
# Controleren correlatie tussen data en prediction
correlation <- complete %>%
na.omit(complete)
cor(correlation$online_shoppers, correlation$prediction)
View(complete)
View(selected_country)
View(overview_by_country)
setwd("CSV")
# Originele dataset
overview_by_country <- read_csv2("overview_by_country.csv")
# BELANGRIJK Keuze maken voor land ----
chosen_country <- c("Italy")
selected_country <- overview_by_country %>%
filter(country == chosen_country)
# Creeren van prognose
# create a data frame to store your variables
df <- data.frame(
year = (2008:2024),
online_shoppers = c(selected_country$individuals_purchasing_online_in_percentage, rep(NA, 4))
)
# The lm function in R will exclude the observations with NA values while fitting the model
model.1 <- lm(formula = online_shoppers ~ year, data = df)
# tidy your model and include 95% confidence intervals
broom::tidy(model.1, conf.int = T)
# you can use the predict function as well for precise predictions
# get predictions for every X value
predict <- predict(object = model.1, newdata = df)
# Prediction toevoegen in nieuwe dataframe met originele waardes
complete <- df %>%
cbind(prediction = predict) %>%
mutate(country = chosen_country) %>%
mutate_if(is.numeric, ~round(., 0))
complete <- complete[, c(4,1,2,3)] # Ordenen van kolom landnaam eerst
# Controleren correlatie tussen data en prediction
correlation <- complete %>%
na.omit(complete)
cor(correlation$online_shoppers, correlation$prediction)
View(complete)
overview_by_country <- read_csv2("overview_by_country.csv")
# BELANGRIJK Keuze maken voor land ----
chosen_country <- c("Italy")
selected_country <- overview_by_country %>%
filter(country == chosen_country)
# Creeren van prognose
# create a data frame to store your variables
df <- data.frame(
year = (2008:2024),
aantal_online_shoppers = c(selected_country$aantal_online_shoppers, rep(NA, 4))
)
# The lm function in R will exclude the observations with NA values while fitting the model
model.1 <- lm(formula = aantal_online_shoppers ~ year, data = df)
# tidy your model and include 95% confidence intervals
broom::tidy(model.1, conf.int = T)
# you can use the predict function as well for precise predictions
# get predictions for every X value
predict <- predict(object = model.1, newdata = df)
# Prediction toevoegen in nieuwe dataframe met originele waardes
complete <- df %>%
cbind(prediction = predict) %>%
mutate(country = chosen_country) %>%
mutate_if(is.numeric, ~round(., 0))
complete <- complete[, c(4,1,2,3)] # Ordenen van kolom landnaam eerst
# Controleren correlatie tussen data en prediction
correlation <- complete %>%
na.omit(complete)
cor(correlation$aantal_online_shoppers, correlation$prediction)
View(complete)
setwd("CSV")
# Originele dataset
overview_by_country <- read_csv2("overview_by_country.csv")
# BELANGRIJK Keuze maken voor land ----
chosen_country <- c("Italy")
selected_country <- overview_by_country %>%
filter(country == chosen_country)
# Creeren van prognose
# create a data frame to store your variables
df <- data.frame(
year = (2008:2024),
online_shoppers = c(selected_country$individuals_purchasing_online_in_percentage, rep(NA, 4))
)
# The lm function in R will exclude the observations with NA values while fitting the model
model.1 <- lm(formula = online_shoppers ~ year, data = df)
# tidy your model and include 95% confidence intervals
broom::tidy(model.1, conf.int = T)
# you can use the predict function as well for precise predictions
# get predictions for every X value
predict <- predict(object = model.1, newdata = df)
# Prediction toevoegen in nieuwe dataframe met originele waardes
complete <- df %>%
cbind(prediction = predict) %>%
mutate(country = chosen_country) %>%
mutate_if(is.numeric, ~round(., 0))
complete <- complete[, c(4,1,2,3)] # Ordenen van kolom landnaam eerst
# Controleren correlatie tussen data en prediction
correlation <- complete %>%
na.omit(complete)
cor(correlation$online_shoppers, correlation$prediction)
View(complete)
# Originele dataset
overview_by_country <- read_csv2("overview_by_country.csv")
# BELANGRIJK Keuze maken voor land ----
chosen_country <- c("Germany")
selected_country <- overview_by_country %>%
filter(country == chosen_country)
# Creeren van prognose
# create a data frame to store your variables
df <- data.frame(
year = (2008:2024),
online_shoppers = c(selected_country$individuals_purchasing_online_in_percentage, rep(NA, 4))
)
# The lm function in R will exclude the observations with NA values while fitting the model
model.1 <- lm(formula = online_shoppers ~ year, data = df)
# tidy your model and include 95% confidence intervals
broom::tidy(model.1, conf.int = T)
# you can use the predict function as well for precise predictions
# get predictions for every X value
predict <- predict(object = model.1, newdata = df)
# Prediction toevoegen in nieuwe dataframe met originele waardes
complete <- df %>%
cbind(prediction = predict) %>%
mutate(country = chosen_country) %>%
mutate_if(is.numeric, ~round(., 0))
complete <- complete[, c(4,1,2,3)] # Ordenen van kolom landnaam eerst
# Controleren correlatie tussen data en prediction
correlation <- complete %>%
na.omit(complete)
cor(correlation$online_shoppers, correlation$prediction)
View(complete)
View(selected_country)
View(overview_by_country)
